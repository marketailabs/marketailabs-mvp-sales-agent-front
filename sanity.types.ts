/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Input = {
  _id: string;
  _type: "input";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  titulo?: string;
  placeholder?: string;
  tipo?: "textarea" | "texto" | "email";
  validacion?: string;
};

export type Intro = {
  _id: string;
  _type: "intro";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  parrafo1?: string;
  parrafo2?: string;
};

export type Form = {
  _id: string;
  _type: "form";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  fields?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "input";
  }>;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  fullName?: string;
  email?: string;
  token?: Slug;
  credits?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Input | Intro | Form | User | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/Form/getForm.ts
// Variable: getFormsQuery
// Query: *[_type == "form"]{  _id,  name,  "fields": fields[]->{    _id,    name,    titulo,    placeholder,    tipo,    validacion    // Agrega aqu√≠ cualquier otro campo que tengas en tu inputType  }}
export type GetFormsQueryResult = Array<{
  _id: string;
  name: string | null;
  fields: Array<{
    _id: string;
    name: string | null;
    titulo: string | null;
    placeholder: string | null;
    tipo: "email" | "textarea" | "texto" | null;
    validacion: string | null;
  }> | null;
}>;

// Source: ./sanity/lib/Intro/getIntro.ts
// Variable: getIntroQuery
// Query: *[_type == "intro"] | order(_createdAt asc){      _id,      title,      parrafo1,      parrafo2    }
export type GetIntroQueryResult = Array<{
  _id: string;
  title: string | null;
  parrafo1: string | null;
  parrafo2: string | null;
}>;

// Source: ./sanity/lib/User/getUserByEmail.ts
// Variable: getUserByEmailQuery
// Query: *[_type == "user" && email == $email][0]
export type GetUserByEmailQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  fullName?: string;
  email?: string;
  token?: Slug;
  credits?: number;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"form\"]{\n  _id,\n  name,\n  \"fields\": fields[]->{\n    _id,\n    name,\n    titulo,\n    placeholder,\n    tipo,\n    validacion\n    // Agrega aqu\xED cualquier otro campo que tengas en tu inputType\n  }\n}": GetFormsQueryResult;
    "*[_type == \"intro\"] | order(_createdAt asc){\n      _id,\n      title,\n      parrafo1,\n      parrafo2\n    }": GetIntroQueryResult;
    "*[_type == \"user\" && email == $email][0]": GetUserByEmailQueryResult;
  }
}
